# MEEF Complete Malware Processing Pipeline (Windows PowerShell)
# Extract → Disassemble → Parse → Generate IR

$SAMPLES_DIR = "samples\malicious"
$OUTPUT_DIR = "output\ir_results"
$TEMP_DIR = "temp_extracted"
$CATALOG_FILE = "data\catalog.csv"

Write-Host ""
Write-Host "╔══════════════════════════════════════════════════════════╗" -ForegroundColor Cyan
Write-Host "║        MEEF Complete Malware Processing Pipeline        ║" -ForegroundColor Cyan
Write-Host "╚══════════════════════════════════════════════════════════╝" -ForegroundColor Cyan
Write-Host ""

# Safety check
Write-Host "⚠️  WARNING: This will process REAL MALWARE samples!" -ForegroundColor Yellow
Write-Host "   Make sure you are in an isolated VM environment." -ForegroundColor Yellow
Write-Host ""
$confirm = Read-Host "Continue? (yes/no)"
if ($confirm -ne "yes") {
    Write-Host "Aborted." -ForegroundColor Yellow
    exit 0
}

# Check dependencies
Write-Host ""
Write-Host "[*] Checking dependencies..." -ForegroundColor Cyan
$missing_deps = 0

# Check Python
if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
    Write-Host "  ✗ python not found" -ForegroundColor Red
    Write-Host "    Download from: https://www.python.org/" -ForegroundColor Yellow
    $missing_deps = 1
}

# Check 7zip (for extraction)
if (-not (Get-Command 7z -ErrorAction SilentlyContinue)) {
    Write-Host "  ⚠ 7zip not found in PATH" -ForegroundColor Yellow
    Write-Host "    Install from: https://www.7-zip.org/" -ForegroundColor Yellow
    Write-Host "    Or script will use Expand-Archive (slower)" -ForegroundColor Yellow
}

# Check objdump (optional - we'll use dumpbin if available)
if (-not (Get-Command objdump -ErrorAction SilentlyContinue)) {
    if (-not (Get-Command dumpbin -ErrorAction SilentlyContinue)) {
        Write-Host "  ⚠ Neither objdump nor dumpbin found" -ForegroundColor Yellow
        Write-Host "    Install MinGW or use Visual Studio tools" -ForegroundColor Yellow
        Write-Host "    For now, we'll skip disassembly" -ForegroundColor Yellow
    } else {
        Write-Host "  ✓ Using dumpbin for disassembly" -ForegroundColor Green
    }
} else {
    Write-Host "  ✓ Using objdump for disassembly" -ForegroundColor Green
}

if ($missing_deps -eq 1) {
    Write-Host ""
    Write-Host "[✗] Missing critical dependencies" -ForegroundColor Red
    exit 1
}

Write-Host "[✓] Dependencies OK" -ForegroundColor Green

# Create directories
New-Item -ItemType Directory -Force -Path $SAMPLES_DIR | Out-Null
New-Item -ItemType Directory -Force -Path $OUTPUT_DIR | Out-Null
New-Item -ItemType Directory -Force -Path $TEMP_DIR | Out-Null

# Find all zip files
Write-Host ""
Write-Host "[*] Searching for malware archives in $SAMPLES_DIR..." -ForegroundColor Cyan
$zip_files = Get-ChildItem -Path $SAMPLES_DIR -Filter "*.zip" -File

if ($zip_files.Count -eq 0) {
    Write-Host "[✗] No .zip files found in $SAMPLES_DIR" -ForegroundColor Red
    Write-Host "    Download samples first manually or using download script" -ForegroundColor Yellow
    exit 1
}

Write-Host "[✓] Found $($zip_files.Count) archive(s)" -ForegroundColor Green

# Process each zip file
$processed = 0
$failed = 0

foreach ($zip_file in $zip_files) {
    Write-Host ""
    Write-Host "╔══════════════════════════════════════════════════════════╗" -ForegroundColor Cyan
    Write-Host "  Processing: $($zip_file.Name)" -ForegroundColor White
    Write-Host "╚══════════════════════════════════════════════════════════╝" -ForegroundColor Cyan
    
    $base_name = $zip_file.BaseName
    $extract_dir = Join-Path $TEMP_DIR $base_name
    New-Item -ItemType Directory -Force -Path $extract_dir | Out-Null
    
    # Step 1: Extract
    Write-Host "[1/4] Extracting archive..." -ForegroundColor Cyan
    try {
        # Try 7zip first (faster and handles password)
        if (Get-Command 7z -ErrorAction SilentlyContinue) {
            & 7z x $zip_file.FullName -o"$extract_dir" -p"infected" -y | Out-Null
        } else {
            # Fallback to PowerShell (no password support)
            Expand-Archive -Path $zip_file.FullName -DestinationPath $extract_dir -Force
        }
        Write-Host "  ✓ Extracted successfully" -ForegroundColor Green
    } catch {
        Write-Host "  ✗ Extraction failed: $_" -ForegroundColor Red
        $failed++
        Remove-Item -Path $extract_dir -Recurse -Force -ErrorAction SilentlyContinue
        continue
    }
    
    # Step 2: Find executable
    Write-Host "[2/4] Locating executable..." -ForegroundColor Cyan
    $exe_file = Get-ChildItem -Path $extract_dir -Include "*.exe","*.dll" -Recurse -File | Select-Object -First 1
    
    if (-not $exe_file) {
        Write-Host "  ✗ No executable found" -ForegroundColor Red
        $failed++
        Remove-Item -Path $extract_dir -Recurse -Force -ErrorAction SilentlyContinue
        continue
    }
    
    Write-Host "  ✓ Found: $($exe_file.Name)" -ForegroundColor Green
    
    # Step 3: Disassemble
    $asm_file = Join-Path $SAMPLES_DIR "$base_name.asm"
    Write-Host "[3/4] Disassembling to $asm_file..." -ForegroundColor Cyan
    
    $disasm_success = $false
    
    # Try objdump first
    if (Get-Command objdump -ErrorAction SilentlyContinue) {
        try {
            & objdump -d -M intel $exe_file.FullName | Out-File -FilePath $asm_file -Encoding utf8
            if ((Get-Item $asm_file).Length -gt 100) {
                $size = (Get-Item $asm_file).Length
                Write-Host "  ✓ Disassembled ($([math]::Round($size/1KB, 2)) KB)" -ForegroundColor Green
                $disasm_success = $true
            }
        } catch {
            Write-Host "  ⚠ objdump failed, trying alternatives..." -ForegroundColor Yellow
        }
    }
    
    # Try dumpbin if objdump failed
    if (-not $disasm_success -and (Get-Command dumpbin -ErrorAction SilentlyContinue)) {
        try {
            & dumpbin /DISASM $exe_file.FullName | Out-File -FilePath $asm_file -Encoding utf8
            if ((Get-Item $asm_file).Length -gt 100) {
                Write-Host "  ✓ Disassembled with dumpbin" -ForegroundColor Green
                $disasm_success = $true
            }
        } catch {
            Write-Host "  ⚠ dumpbin failed" -ForegroundColor Yellow
        }
    }
    
    if (-not $disasm_success) {
        Write-Host "  ✗ Disassembly failed - no suitable tool available" -ForegroundColor Red
        Write-Host "    Install objdump (MinGW) or use Visual Studio dumpbin" -ForegroundColor Yellow
        $failed++
        Remove-Item -Path $extract_dir -Recurse -Force -ErrorAction SilentlyContinue
        continue
    }
    
    # Step 4: Parse with MEEF
    $ir_file = Join-Path $OUTPUT_DIR "$base_name`_ir.json"
    Write-Host "[4/4] Parsing with MEEF..." -ForegroundColor Cyan
    
    $parser_path = "src\cd_frontend\meef_parser.exe"
    if (-not (Test-Path $parser_path)) {
        # Try without .exe extension (for Linux binary or Python script)
        $parser_path = "src\cd_frontend\meef_parser"
        if (-not (Test-Path $parser_path)) {
            Write-Host "  ✗ Parser not found at src\cd_frontend\meef_parser" -ForegroundColor Red
            Write-Host "    Build it first in src\cd_frontend" -ForegroundColor Yellow
            $failed++
            Remove-Item -Path $extract_dir -Recurse -Force -ErrorAction SilentlyContinue
            continue
        }
    }
    
    try {
        $result = & $parser_path $asm_file $ir_file 2>&1
        if (Test-Path $ir_file) {
            Write-Host "  ✓ IR generated: $ir_file" -ForegroundColor Green
            $processed++
        } else {
            Write-Host "  ⚠ Parsing had errors (IR may be partial)" -ForegroundColor Yellow
            if (Test-Path $ir_file) {
                $processed++
            } else {
                $failed++
            }
        }
    } catch {
        Write-Host "  ✗ Parser failed: $_" -ForegroundColor Red
        $failed++
    }
    
    # Clean up extracted files
    Remove-Item -Path $extract_dir -Recurse -Force -ErrorAction SilentlyContinue
}

# Cleanup temp directory
Remove-Item -Path $TEMP_DIR -Recurse -Force -ErrorAction SilentlyContinue

# Summary
Write-Host ""
Write-Host "╔══════════════════════════════════════════════════════════╗" -ForegroundColor Cyan
Write-Host "║                   Processing Complete                    ║" -ForegroundColor Cyan
Write-Host "╠══════════════════════════════════════════════════════════╣" -ForegroundColor Cyan
Write-Host "║ Total archives:         $($zip_files.Count)"
Write-Host "║ Successfully processed: $processed"
Write-Host "║ Failed:                 $failed"
Write-Host "╠══════════════════════════════════════════════════════════╣" -ForegroundColor Cyan
Write-Host "║ Outputs:"
Write-Host "║   ASM files:  $SAMPLES_DIR\*.asm"
Write-Host "║   IR files:   $OUTPUT_DIR\*_ir.json"
Write-Host "╚══════════════════════════════════════════════════════════╝" -ForegroundColor Cyan

# Update catalog
if ($processed -gt 0) {
    Write-Host ""
    Write-Host "[*] Updating catalog.csv..." -ForegroundColor Cyan
    
    # Create catalog if it doesn't exist
    if (-not (Test-Path $CATALOG_FILE)) {
        New-Item -ItemType Directory -Force -Path (Split-Path $CATALOG_FILE) | Out-Null
        "sha256,label,source,first_seen,local_path,ir_path,notes" | Out-File -FilePath $CATALOG_FILE -Encoding utf8
        Write-Host "  ✓ Created catalog.csv" -ForegroundColor Green
    }
    
    # Process each successful sample
    $asm_files = Get-ChildItem -Path $SAMPLES_DIR -Filter "*.asm" -File
    foreach ($asm_file in $asm_files) {
        $base_name = $asm_file.BaseName
        $ir_file = Join-Path $OUTPUT_DIR "$base_name`_ir.json"
        
        if (Test-Path $ir_file) {
            # Calculate SHA256
            $sha256 = (Get-FileHash -Path $asm_file.FullName -Algorithm SHA256).Hash.ToLower()
            
            # Check if already in catalog
            $existing = Select-String -Path $CATALOG_FILE -Pattern $sha256 -Quiet
            if ($existing) {
                continue
            }
            
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            
            # Extract notes from IR (simplified)
            $notes = "none"
            try {
                $ir_content = Get-Content $ir_file -Raw | ConvertFrom-Json
                $behavior_notes = @()
                if ($ir_content.behavior.uses_network -eq 1) { $behavior_notes += "uses_network" }
                if ($ir_content.behavior.uses_fileops -eq 1) { $behavior_notes += "uses_fileops" }
                if ($ir_content.behavior.uses_injection -eq 1) { $behavior_notes += "uses_injection" }
                if ($ir_content.behavior.uses_crypto -eq 1) { $behavior_notes += "uses_crypto" }
                if ($behavior_notes.Count -gt 0) {
                    $notes = $behavior_notes -join ", "
                }
            } catch {}
            
            # Append to catalog
            "$sha256,malicious,MalwareBazaar,$timestamp,$($asm_file.FullName),$ir_file,`"$notes`"" | 
                Out-File -FilePath $CATALOG_FILE -Append -Encoding utf8
        }
    }
    
    Write-Host "  ✓ Catalog updated with $processed entries" -ForegroundColor Green
}

Write-Host ""
Write-Host "[✓] Pipeline complete!" -ForegroundColor Green
Write-Host "    Review results:" -ForegroundColor White
Write-Host "      - ASM files:  Get-ChildItem $SAMPLES_DIR\*.asm" -ForegroundColor White
Write-Host "      - IR files:   Get-ChildItem $OUTPUT_DIR" -ForegroundColor White
Write-Host "      - Catalog:    Get-Content $CATALOG_FILE" -ForegroundColor White
Write-Host ""
