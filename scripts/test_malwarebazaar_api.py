#!/usr/bin/env python3
"""
MalwareBazaar Sample Downloader
Downloads malware samples from MalwareBazaar API
"""

import requests
import json
from pathlib import Path
from datetime import datetime
import time
import sys

class MalwareBazaarDownloader:
    def __init__(self, output_dir="samples/malicious"):
        self.api_url = "https://mb-api.abuse.ch/api/v1/"
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def test_connection(self):
        """Test if API is reachable"""
        print("[*] Testing MalwareBazaar API connection...")
        try:
            response = requests.get("https://mb-api.abuse.ch/", timeout=10)
            if response.status_code == 200:
                print("[✓] API is reachable")
                return True
            else:
                print(f"[✗] API returned status code: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"[✗] Connection error: {e}")
            return False
    
    def query_recent_samples(self, limit=10):
        """Query recent malware samples"""
        print(f"\n[*] Querying MalwareBazaar for recent samples...")
        
        data = {
            'query': 'get_recent',
            'selector': str(limit)
        }
        
        try:
            response = requests.post(
                self.api_url, 
                data=data, 
                timeout=30,
                headers={'User-Agent': 'MEEF-Research-Tool'}
            )
            
            print(f"[DEBUG] Status Code: {response.status_code}")
            
            if response.status_code != 200:
                print(f"[✗] HTTP Error: {response.status_code}")
                print(f"[DEBUG] Response: {response.text[:200]}")
                return []
            
            try:
                result = response.json()
            except json.JSONDecodeError as e:
                print(f"[✗] JSON decode error: {e}")
                print(f"[DEBUG] Response: {response.text[:200]}")
                return []
            
            print(f"[DEBUG] Response keys: {result.keys()}")
            print(f"[DEBUG] Query status: {result.get('query_status')}")
            
            if result.get('query_status') == 'ok':
                samples = result.get('data', [])
                print(f"[✓] Found {len(samples)} samples")
                return samples
            else:
                print(f"[✗] Query failed: {result.get('query_status')}")
                if 'data' in result:
                    print(f"[DEBUG] Data: {result.get('data')}")
                return []
                
        except requests.exceptions.Timeout:
            print("[✗] Request timed out. Try again later.")
            return []
        except requests.exceptions.RequestException as e:
            print(f"[✗] Request error: {e}")
            return []
        except Exception as e:
            print(f"[✗] Unexpected error: {e}")
            return []
    
    def query_by_tag(self, tag, limit=10):
        """Query samples by tag (e.g., 'ransomware', 'trojan')"""
        print(f"\n[*] Querying samples with tag: {tag}")
        
        data = {
            'query': 'get_taginfo',
            'tag': tag,
            'limit': str(limit)
        }
        
        try:
            response = requests.post(
                self.api_url,
                data=data,
                timeout=30,
                headers={'User-Agent': 'MEEF-Research-Tool'}
            )
            
            if response.status_code != 200:
                print(f"[✗] HTTP Error: {response.status_code}")
                return []
            
            result = response.json()
            
            if result.get('query_status') == 'ok':
                samples = result.get('data', [])
                print(f"[✓] Found {len(samples)} samples with tag '{tag}'")
                return samples
            else:
                print(f"[✗] Query failed: {result.get('query_status')}")
                return []
                
        except Exception as e:
            print(f"[✗] Error querying API: {e}")
            return []
    
    def download_sample(self, sha256_hash):
        """Download a specific sample by SHA256"""
        print(f"\n[*] Downloading sample: {sha256_hash[:16]}...")
        
        data = {
            'query': 'get_file',
            'sha256_hash': sha256_hash
        }
        
        try:
            response = requests.post(
                self.api_url,
                data=data,
                timeout=60,
                headers={'User-Agent': 'MEEF-Research-Tool'}
            )
            
            if response.status_code == 200:
                # Check if response is JSON (error) or binary (file)
                content_type = response.headers.get('Content-Type', '')
                
                if 'application/json' in content_type:
                    # Got JSON response (probably an error)
                    result = response.json()
                    print(f"[✗] Download failed: {result.get('query_status')}")
                    return None
                
                # Save the zip file
                output_file = self.output_dir / f"{sha256_hash}.zip"
                with open(output_file, 'wb') as f:
                    f.write(response.content)
                
                print(f"[✓] Downloaded: {output_file}")
                print(f"    Password: 'infected' (standard)")
                return output_file
            else:
                print(f"[✗] Download failed: HTTP {response.status_code}")
                return None
                
        except Exception as e:
            print(f"[✗] Error downloading: {e}")
            return None
    
    def display_samples(self, samples):
        """Display sample information"""
        if not samples:
            print("[✗] No samples to display")
            return
        
        print(f"\n{'='*90}")
        print(f"{'#':<4} {'SHA256':<20} {'File Type':<12} {'Signature':<25} {'Tags'}")
        print(f"{'='*90}")
        
        for idx, sample in enumerate(samples[:20], 1):  # Show first 20
            sha256 = sample.get('sha256', 'N/A')[:16] + "..."
            file_type = sample.get('file_type', 'N/A')
            signature = sample.get('signature', 'Generic')[:23]
            tags = ', '.join(sample.get('tags', [])[:2])
            
            print(f"{idx:<4} {sha256:<20} {file_type:<12} {signature:<25} {tags}")
        
        print(f"{'='*90}\n")
    
    def save_metadata(self, samples, filename="malware_metadata.json"):
        """Save sample metadata for later use"""
        if not samples:
            print("[✗] No samples to save")
            return
        
        metadata_file = self.output_dir / filename
        
        with open(metadata_file, 'w') as f:
            json.dump(samples, f, indent=2)
        
        print(f"[✓] Metadata saved to: {metadata_file}")
    
    def interactive_download(self):
        """Interactive download mode"""
        print("\n" + "="*90)
        print("          MalwareBazaar Sample Downloader")
        print("="*90)
        print("\n⚠️  WARNING: You are about to download REAL MALWARE!")
        print("   - Only use in isolated VM")
        print("   - Never execute downloaded files")
        print("   - Keep files password protected (password: 'infected')")
        print("\n" + "="*90)
        
        # Test connection first
        if not self.test_connection():
            print("\n[✗] Cannot connect to MalwareBazaar API")
            print("    Possible issues:")
            print("    - No internet connection")
            print("    - API is down")
            print("    - Firewall blocking requests")
            print("    - SSL/TLS issues")
            return
        
        confirm = input("\nContinue? (yes/no): ").strip().lower()
        if confirm != 'yes':
            print("Aborted.")
            return
        
        print("\nOptions:")
        print("  [1] Download recent samples")
        print("  [2] Download by tag (ransomware, trojan, etc.)")
        print("  [3] Download specific SHA256")
        print("  [4] Test API with single sample")
        print("  [Q] Quit")
        
        choice = input("\nYour choice: ").strip()
        
        if choice == '1':
            limit = input("How many samples? (default 10, max 100): ").strip()
            limit = int(limit) if limit.isdigit() else 10
            limit = min(limit, 100)  # Cap at 100
            
            samples = self.query_recent_samples(limit)
            if samples:
                self.display_samples(samples)
                self.save_metadata(samples)
                
                download = input("\nDownload these samples? (yes/no): ").strip().lower()
                if download == 'yes':
                    for sample in samples[:limit]:
                        sha256 = sample.get('sha256')
                        if sha256:
                            self.download_sample(sha256)
                            time.sleep(2)  # Be nice to the API
        
        elif choice == '2':
            print("\nPopular tags:")
            print("  - ransomware")
            print("  - trojan")
            print("  - banker")
            print("  - stealer")
            print("  - loader")
            print("  - rat")
            print("  - downloader")
            
            tag = input("\nEnter tag: ").strip()
            limit = input("How many samples? (default 10): ").strip()
            limit = int(limit) if limit.isdigit() else 10
            
            samples = self.query_by_tag(tag, limit)
            if samples:
                self.display_samples(samples)
                self.save_metadata(samples, f"malware_{tag}_metadata.json")
                
                download = input("\nDownload these samples? (yes/no): ").strip().lower()
                if download == 'yes':
                    for sample in samples[:limit]:
                        sha256 = sample.get('sha256')
                        if sha256:
                            self.download_sample(sha256)
                            time.sleep(2)
        
        elif choice == '3':
            sha256 = input("Enter SHA256 hash: ").strip()
            self.download_sample(sha256)
        
        elif choice == '4':
            print("\n[*] Testing API with sample query...")
            samples = self.query_recent_samples(1)
            if samples:
                print("[✓] API is working!")
                self.display_samples(samples)
            else:
                print("[✗] API test failed")
        
        elif choice.upper() == 'Q':
            print("Goodbye!")
        else:
            print("Invalid choice!")


if __name__ == "__main__":
    downloader = MalwareBazaarDownloader()
    
    try:
        downloader.interactive_download()
    except KeyboardInterrupt:
        print("\n\nInterrupted by user")
    except Exception as e:
        print(f"\n[✗] Fatal error: {e}")
        import traceback
        traceback.print_exc()
