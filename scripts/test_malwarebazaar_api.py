#!/usr/bin/env python3
"""
MalwareBazaar API Test & Diagnostic Tool (with API Key support)
"""

import requests
import json
import os
from pathlib import Path

def get_api_key():
    """Get API key from file or environment"""
    # Check config file
    config_file = Path('.malwarebazaar_api_key')
    if config_file.exists():
        with open(config_file, 'r') as f:
            api_key = f.read().strip()
            if api_key:
                return api_key
    
    # Check environment variable
    api_key = os.environ.get('MALWAREBAZAAR_API_KEY')
    if api_key:
        return api_key
    
    return None

def test_basic_connection():
    """Test basic connectivity"""
    print("="*70)
    print("TEST 1: Basic Connectivity")
    print("="*70)
    
    try:
        response = requests.get("https://mb-api.abuse.ch/", timeout=10)
        print(f"✓ Can reach mb-api.abuse.ch")
        print(f"  Status: {response.status_code}")
        return True
    except Exception as e:
        print(f"✗ Cannot reach API: {e}")
        return False

def test_api_query_without_key():
    """Test API query without authentication"""
    print("\n" + "="*70)
    print("TEST 2: API Query WITHOUT API Key")
    print("="*70)
    
    url = "https://mb-api.abuse.ch/api/v1/"
    data = {
        'query': 'get_recent',
        'selector': '1'
    }
    
    try:
        print(f"Sending POST to: {url}")
        print(f"Data: {data}")
        
        response = requests.post(url, data=data, timeout=30)
        
        print(f"\n  Response Status: {response.status_code}")
        
        if response.status_code == 401:
            print(f"  ✓ Got 401 (expected - API key required)")
            print(f"  → MalwareBazaar now requires authentication")
            return False
        elif response.status_code == 200:
            print(f"  ✓ Got 200 (API key not required anymore?)")
            return True
        else:
            print(f"  ⚠ Unexpected status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ✗ Request failed: {e}")
        return False

def test_api_query_with_key(api_key):
    """Test API query with authentication"""
    print("\n" + "="*70)
    print("TEST 3: API Query WITH API Key")
    print("="*70)
    
    if not api_key:
        print("  ⚠ No API key found - skipping this test")
        print("  → Get your key from: https://bazaar.abuse.ch/api/")
        return False
    
    print(f"  Using API key: {api_key[:8]}...{api_key[-4:]}")
    
    url = "https://mb-api.abuse.ch/api/v1/"
    headers = {
        'API-KEY': api_key,
        'User-Agent': 'MEEF-Research-Tool'
    }
    data = {
        'query': 'get_recent',
        'selector': '1'
    }
    
    try:
        response = requests.post(url, data=data, headers=headers, timeout=30)
        
        print(f"\n  Response Status: {response.status_code}")
        print(f"  Content-Type: {response.headers.get('Content-Type')}")
        
        if response.status_code == 401:
            print(f"  ✗ Still got 401 - Invalid API key")
            print(f"  → Check your API key at: https://bazaar.abuse.ch/api/")
            return False
        
        elif response.status_code == 200:
            try:
                result = response.json()
                print(f"\n  ✓ Valid JSON response")
                print(f"  Keys: {list(result.keys())}")
                print(f"  Query Status: {result.get('query_status')}")
                
                if result.get('query_status') == 'ok':
                    print(f"\n  ✓✓✓ API query successful!")
                    data = result.get('data', [])
                    print(f"  Samples returned: {len(data)}")
                    
                    if data:
                        sample = data[0]
                        print(f"\n  Sample preview:")
                        print(f"    SHA256: {sample.get('sha256', 'N/A')[:32]}...")
                        print(f"    Signature: {sample.get('signature', 'N/A')}")
                        print(f"    File Type: {sample.get('file_type', 'N/A')}")
                        print(f"    Tags: {', '.join(sample.get('tags', []))}")
                    
                    return True
                else:
                    print(f"  ✗ Query failed: {result.get('query_status')}")
                    return False
                    
            except json.JSONDecodeError as e:
                print(f"  ✗ Invalid JSON: {e}")
                return False
        else:
            print(f"  ⚠ Unexpected status: {response.status_code}")
            print(f"  Response: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"  ✗ Request failed: {e}")
        return False

def check_api_key_storage():
    """Check where API key might be stored"""
    print("\n" + "="*70)
    print("API Key Storage Check")
    print("="*70)
    
    # Check file
    config_file = Path('.malwarebazaar_api_key')
    if config_file.exists():
        print(f"  ✓ Found: {config_file}")
        print(f"    File size: {config_file.stat().st_size} bytes")
        
        with open(config_file, 'r') as f:
            key = f.read().strip()
            if key:
                print(f"    Content: {key[:8]}...{key[-4:]} ({len(key)} chars)")
            else:
                print(f"    ⚠ File is empty!")
    else:
        print(f"  ✗ Not found: {config_file}")
    
    # Check environment
    env_key = os.environ.get('MALWAREBAZAAR_API_KEY')
    if env_key:
        print(f"  ✓ Found in environment: MALWAREBAZAAR_API_KEY")
        print(f"    Content: {env_key[:8]}...{env_key[-4:]} ({len(env_key)} chars)")
    else:
        print(f"  ✗ Not found in environment: MALWAREBAZAAR_API_KEY")

def show_curl_examples(api_key):
    """Show equivalent curl commands"""
    print("\n" + "="*70)
    print("Curl Command Examples")
    print("="*70)
    
    print("\n1. Without API Key (will fail with 401):")
    print("""
curl -X POST https://mb-api.abuse.ch/api/v1/ \\
  -d "query=get_recent" \\
  -d "selector=1"
    """)
    
    if api_key:
        print("\n2. With API Key (should work):")
        print(f"""
curl -X POST https://mb-api.abuse.ch/api/v1/ \\
  -H "API-KEY: {api_key}" \\
  -d "query=get_recent" \\
  -d "selector=1"
        """)
    else:
        print("\n2. With API Key (replace YOUR_KEY):")
        print("""
curl -X POST https://mb-api.abuse.ch/api/v1/ \\
  -H "API-KEY: YOUR_KEY_HERE" \\
  -d "query=get_recent" \\
  -d "selector=1"
        """)

def show_setup_instructions():
    """Show how to get and setup API key"""
    print("\n" + "="*70)
    print("How to Get API Key")
    print("="*70)
    
    print("""
Step 1: Request API Key
  → Go to: https://bazaar.abuse.ch/api/
  → Click "Request API Key"
  → Fill out form (Name, Email, Purpose)
  → Wait for email (usually < 30 minutes)

Step 2: Save Your API Key
  → Create file: .malwarebazaar_api_key
  → Put your key in the file
  → Secure it: chmod 600 .malwarebazaar_api_key

Step 3: Test
  → Run: python3 test_malwarebazaar_api.py
  → Should see "API query successful!"

Commands:
  echo "YOUR_API_KEY_HERE" > .malwarebazaar_api_key
  chmod 600 .malwarebazaar_api_key
  python3 test_malwarebazaar_api.py
    """)

def diagnose_issues():
    """Provide diagnostic information"""
    print("\n" + "="*70)
    print("Diagnostic Info")
    print("="*70)
    
    import sys
    import ssl
    
    print(f"  Python: {sys.version.split()[0]}")
    
    try:
        import requests
        print(f"  Requests: {requests.__version__}")
    except:
        print(f"  Requests: NOT INSTALLED")
    
    print(f"  SSL: {ssl.OPENSSL_VERSION}")
    
    print("\nCommon Issues:")
    print("  1. No API key → Get from https://bazaar.abuse.ch/api/")
    print("  2. Invalid API key → Check email for correct key")
    print("  3. Key not saved → Create .malwarebazaar_api_key file")
    print("  4. No internet → Check connection")
    print("  5. Firewall → Allow outbound HTTPS to mb-api.abuse.ch")

def main():
    print("\n╔══════════════════════════════════════════════════════════╗")
    print("║       MalwareBazaar API Diagnostic Tool                 ║")
    print("║              (with API Key support)                      ║")
    print("╚══════════════════════════════════════════════════════════╝\n")
    
    # Get API key
    api_key = get_api_key()
    
    # Run tests
    test1 = test_basic_connection()
    test2 = test_api_query_without_key()
    test3 = test_api_query_with_key(api_key)
    
    # Additional checks
    check_api_key_storage()
    show_curl_examples(api_key)
    diagnose_issues()
    
    # Summary
    print("\n" + "="*70)
    print("SUMMARY")
    print("="*70)
    
    if test1 and test3:
        print("\n✓✓✓ ALL TESTS PASSED!")
        print("    Your API key works!")
        print("    download_samples.py will work now!")
    elif test1 and test2:
        print("\n⚠ API is reachable but NO API KEY")
        print("   MalwareBazaar requires authentication now")
        print("   → Get your API key from: https://bazaar.abuse.ch/api/")
        show_setup_instructions()
    elif test1 and not test3 and api_key:
        print("\n✗ API key found but INVALID")
        print("   → Check your API key")
        print("   → Verify at: https://bazaar.abuse.ch/api/")
    else:
        print("\n✗ Cannot reach API")
        print("   → Check internet connection")
        print("   → Try: ping mb-api.abuse.ch")
    
    print("\n")

if __name__ == "__main__":
    main()
