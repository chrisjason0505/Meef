#!/bin/bash
# Complete Malware Processing Pipeline
# Extract → Disassemble → Parse → Generate IR

set -e  # Exit on error

SAMPLES_DIR="samples/malicious"
OUTPUT_DIR="output/ir_results"
TEMP_DIR="temp_extracted"

echo "╔══════════════════════════════════════════════════════════╗"
echo "║        MEEF Complete Malware Processing Pipeline        ║"
echo "╚══════════════════════════════════════════════════════════╝"
echo ""

# Safety check
echo "⚠️  WARNING: This will process REAL MALWARE samples!"
echo "   Make sure you are in an isolated VM environment."
echo ""
read -p "Continue? (yes/no): " confirm
if [ "$confirm" != "yes" ]; then
    echo "Aborted."
    exit 0
fi

# Check dependencies
echo ""
echo "[*] Checking dependencies..."
missing_deps=0

if ! command -v unzip &> /dev/null; then
    echo "  ✗ unzip not found (install: apt install unzip)"
    missing_deps=1
fi

if ! command -v objdump &> /dev/null; then
    echo "  ✗ objdump not found (install: apt install binutils)"
    missing_deps=1
fi

if ! command -v python3 &> /dev/null; then
    echo "  ✗ python3 not found"
    missing_deps=1
fi

if [ $missing_deps -eq 1 ]; then
    echo ""
    echo "[✗] Missing dependencies. Install with:"
    echo "    sudo apt install unzip binutils python3"
    exit 1
fi

echo "[✓] All dependencies found"

# Create directories
mkdir -p "$SAMPLES_DIR"
mkdir -p "$OUTPUT_DIR"
mkdir -p "$TEMP_DIR"

# Find all zip files
echo ""
echo "[*] Searching for malware archives in $SAMPLES_DIR..."
zip_files=($(find "$SAMPLES_DIR" -name "*.zip" -type f))

if [ ${#zip_files[@]} -eq 0 ]; then
    echo "[✗] No .zip files found in $SAMPLES_DIR"
    echo "    Download samples first using: python3 download_samples.py"
    exit 1
fi

echo "[✓] Found ${#zip_files[@]} archive(s)"

# Process each zip file
processed=0
failed=0

for zip_file in "${zip_files[@]}"; do
    echo ""
    echo "╔══════════════════════════════════════════════════════════╗"
    echo "  Processing: $(basename "$zip_file")"
    echo "╚══════════════════════════════════════════════════════════╝"
    
    # Extract basename for naming
    base_name=$(basename "$zip_file" .zip)
    extract_dir="$TEMP_DIR/$base_name"
    mkdir -p "$extract_dir"
    
    # Step 1: Extract (password: infected)
    echo "[1/4] Extracting archive..."
    if unzip -P infected -q "$zip_file" -d "$extract_dir" 2>/dev/null; then
        echo "  ✓ Extracted successfully"
    else
        echo "  ✗ Extraction failed (trying 'malware' password)"
        if unzip -P malware -q "$zip_file" -d "$extract_dir" 2>/dev/null; then
            echo "  ✓ Extracted with alternate password"
        else
            echo "  ✗ Could not extract"
            ((failed++))
            continue
        fi
    fi
    
    # Step 2: Find executable
    echo "[2/4] Locating executable..."
    exe_file=$(find "$extract_dir" -type f \( -name "*.exe" -o -name "*.dll" \) | head -1)
    
    if [ -z "$exe_file" ]; then
        echo "  ✗ No executable found"
        ((failed++))
        continue
    fi
    
    echo "  ✓ Found: $(basename "$exe_file")"
    
    # Step 3: Disassemble
    asm_file="$SAMPLES_DIR/${base_name}.asm"
    echo "[3/4] Disassembling to $asm_file..."
    
    if objdump -d -M intel "$exe_file" > "$asm_file" 2>/dev/null; then
        asm_size=$(stat -c%s "$asm_file")
        if [ $asm_size -gt 100 ]; then
            echo "  ✓ Disassembled ($(numfmt --to=iec-i --suffix=B $asm_size 2>/dev/null || echo "$asm_size bytes"))"
        else
            echo "  ✗ Disassembly too small (probably failed)"
            ((failed++))
            rm -f "$asm_file"
            continue
        fi
    else
        echo "  ✗ Disassembly failed"
        ((failed++))
        continue
    fi
    
    # Step 4: Parse with MEEF
    ir_file="$OUTPUT_DIR/${base_name}_ir.json"
    echo "[4/4] Parsing with MEEF..."
    
    if ./src/cd_frontend/meef_parser "$asm_file" "$ir_file" > /dev/null 2>&1; then
        echo "  ✓ IR generated: $ir_file"
        ((processed++))
    else
        echo "  ⚠ Parsing had errors (IR may be partial)"
        # Still count as processed if IR file exists
        if [ -f "$ir_file" ]; then
            ((processed++))
        else
            ((failed++))
        fi
    fi
    
    # Clean up extracted files (keep .asm and .zip)
    rm -rf "$extract_dir"
done

# Cleanup temp directory
rm -rf "$TEMP_DIR"

# Summary
echo ""
echo "╔══════════════════════════════════════════════════════════╗"
echo "║                   Processing Complete                    ║"
echo "╠══════════════════════════════════════════════════════════╣"
echo "║ Total archives:     ${#zip_files[@]}"
echo "║ Successfully processed: $processed"
echo "║ Failed:            $failed"
echo "╠══════════════════════════════════════════════════════════╣"
echo "║ Outputs:"
echo "║   ASM files:  $SAMPLES_DIR/*.asm"
echo "║   IR files:   $OUTPUT_DIR/*_ir.json"
echo "╚══════════════════════════════════════════════════════════╝"
echo ""

# Update catalog
CATALOG_FILE="data/catalog.csv"
if [ $processed -gt 0 ]; then
    echo ""
    echo "[*] Updating catalog.csv..."
    
    # Create catalog if it doesn't exist
    if [ ! -f "$CATALOG_FILE" ]; then
        echo "sha256,label,source,first_seen,local_path,ir_path,notes" > "$CATALOG_FILE"
        echo "  ✓ Created catalog.csv"
    fi
    
    # Process each successful sample
    for asm_file in "$SAMPLES_DIR"/*.asm; do
        if [ -f "$asm_file" ]; then
            base_name=$(basename "$asm_file" .asm)
            ir_file="$OUTPUT_DIR/${base_name}_ir.json"
            
            # Check if IR file exists
            if [ -f "$ir_file" ]; then
                # Calculate SHA256 of asm file
                if command -v sha256sum &> /dev/null; then
                    sha256=$(sha256sum "$asm_file" | cut -d' ' -f1)
                elif command -v shasum &> /dev/null; then
                    sha256=$(shasum -a 256 "$asm_file" | cut -d' ' -f1)
                else
                    sha256="UNKNOWN_HASH"
                fi
                
                # Check if already in catalog
                if grep -q "$sha256" "$CATALOG_FILE" 2>/dev/null; then
                    continue  # Skip if already exists
                fi
                
                # Get timestamp
                timestamp=$(date '+%Y-%m-%d %H:%M:%S')
                
                # Extract behavioral notes from IR
                notes=""
                if command -v jq &> /dev/null && [ -f "$ir_file" ]; then
                    behavior_flags=$(jq -r '.behavior | to_entries | map(select(.value == 1) | .key) | join(", ")' "$ir_file" 2>/dev/null)
                    notes="${behavior_flags:-none}"
                else
                    notes="none"
                fi
                
                # Append to catalog
                echo "$sha256,malicious,MalwareBazaar,$timestamp,$asm_file,$ir_file,\"$notes\"" >> "$CATALOG_FILE"
            fi
        fi
    done
    
    echo "  ✓ Catalog updated with $processed entries"
fi

echo ""
echo "[✓] Pipeline complete!"
echo "    Review results:"
echo "      - ASM files:  ls -lh $SAMPLES_DIR/*.asm"
echo "      - IR files:   ls -lh $OUTPUT_DIR"
echo "      - Catalog:    cat $CATALOG_FILE"
